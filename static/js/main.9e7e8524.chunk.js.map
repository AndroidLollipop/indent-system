{"version":3,"sources":["index.js"],"names":["setTabs","socket","serverURL","additionalTabs","tabID","App","React","tabs","mySetTabs","socketIOClient","secure","on","indents","writeToken","undefined","ackWriteToken","pendingWrites","dataStore","notifyNewData","notifications","notificationsStore","notifyNewN","emit","disconnect","selTab","setSelTab","Tabs","label","mykey","TransportView","NewIndentView","NotificationsPanel","DevPanel","map","v","i","DetailGenerator","readDataStore","name","removable","removeCallback","index","length","id","filter","x","detailPersistentStore","currSelTab","Math","min","details","myServerURL","setServerURL","response","setResponse","myListener","data","off","value","onChange","event","target","myData","readNotifications","setData","callbackID","registerNotify","deregisterNotify","newData","encountered","internalUID","push","latest","ListFactory","generator","notificationItemGenerator","style","TransportViewStyle","header","formFields","friendlyName","detailItemGenerator","variant","native","status","statuses","val","onClick","editData","a","writeDataStore","result","currWriteToken","write","myPromise","Promise","resolve","appendDataStore","readRange","submitForm","FormFactory","fields","defaults","fieldStates","initialData","states","setStates","myStates","field","noValidate","text","setText","formItemStyle","multiline","constitutedObject","display","justifyContent","padding","dataDefaults","registerCallback","deregisterCallback","displayFields","transportItemGenerator","font","addDetailTab","Infinity","startDateTime","endDateTime","origin","destination","POC","POCPhone","key","notificationItemStyle","align","title","color","tab","tail","getCallbackSystem","dataSource","registeredCallbacks","callback","children","position","child","obj","props","active","Tab","disableRipple","selected","size","fill","ReactDOM","textAlign","document","getElementById"],"mappings":"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","file":"static/js/main.9e7e8524.chunk.js","sourcesContent":["import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\nimport socketIOClient from \"socket.io-client\";\n\nimport * as Material from \"@material-ui/core\"\nimport * as Icons from \"@material-ui/icons\"\n\nvar serverURL = \"https://murmuring-ocean-38436.herokuapp.com/\"\n\nvar setTabs\nvar additionalTabs = []\nvar tabID = 0\nconst addTab = (tab) => {\n  additionalTabs = [...additionalTabs]\n  additionalTabs.push(tab)\n  setTabs(additionalTabs)\n}\nconst removeTab = (id) => {\n  additionalTabs = [...additionalTabs].filter(x => x[0] !== id)\n  detailPersistentStore[id] = undefined\n  setTabs(additionalTabs)\n}\n\nvar socket\n\nconst App = () => {\n  \n  var [tabs, mySetTabs] = React.useState([])\n  setTabs = mySetTabs\n  React.useEffect(() => {\n    socket = socketIOClient(serverURL, {secure: true});\n    socket.on(\"sendIndents\", (indents, writeToken) => {\n      if (writeToken !== undefined) {\n        if (writeToken < ackWriteToken) {\n          return\n        }\n        ackWriteToken = writeToken\n        if (pendingWrites[writeToken] !== undefined) {\n          pendingWrites[writeToken]()\n        }\n      }\n      dataStore = [...indents]\n      notifyNewData()\n    })\n    socket.on(\"sendNotifications\", (notifications) => {\n      notificationsStore = [...notifications]\n      notifyNewN()\n    })\n    socket.emit(\"requestIndents\", \"\")\n    socket.emit(\"requestNotifications\", \"\")\n    return () => {\n      socket.disconnect()\n    }\n  }, [])\n  const [selTab, setSelTab] = React.useState(0);\n\n  return (\n    <Tabs selTab={selTab} setSelTab={setSelTab}>\n      {[(<div label=\"view indents\" key=\"defaultTab1\" mykey=\"defaultTab1\">\n        <TransportView setSelTab={setSelTab}/>\n      </div>),\n      (<div label=\"new indent\" key=\"defaultTab2\" mykey=\"defaultTab2\">\n        <NewIndentView/>\n      </div>),\n      (<div label=\"notifications\" key=\"defaultTab3\" mykey=\"defaultTab3\">\n        <NotificationsPanel setSelTab={setSelTab}/>\n      </div>),\n      (<div label=\"dev\" key=\"defaultTab4\" mykey=\"defaultTab4\">\n        <DevPanel/>\n      </div>), ...tabs.map((v, i) => (<DetailGenerator mykey={v[0]} label={readDataStore(v[1]).name} removable=\"true\" removeCallback={(index, length) => {\n        removeTab(v[0])\n        const currSelTab = Math.min(selTab, length-1)\n        if (currSelTab > index) {\n          setSelTab(currSelTab-1)\n        }\n      }} details={v} key={v[0]} />))]}\n    </Tabs>\n  );\n}\n\nconst DevPanel = () => {\n  const [myServerURL, setServerURL] = React.useState(serverURL)\n  const [response, setResponse] = React.useState(\"\");\n  const myListener = data => {\n    setResponse(data)\n  }\n\n  React.useEffect(() => {\n    socket.on(\"FromAPI\", myListener);\n    return () => {\n      socket.off(\"FromAPI\", myListener)\n    }\n  }, []);\n\n  return (<div>\n    <div>Server URL</div><textarea value={myServerURL} onChange={(event) => {\n      serverURL = event.target.value\n      setServerURL(serverURL)\n    }}/>\n    <div>It's {response}</div>\n  </div>)\n}\n\nconst NotificationsPanel = ({setSelTab}) => {\n  var myData = readNotifications()\n  const [data, setData] = React.useState(myData)\n  React.useEffect(() => {\n    const callbackID = registerNotify(setData)\n    return () => deregisterNotify(callbackID)\n  }, [])\n  var newData = []\n  const encountered = {}\n  for (var i = myData.length-1; i > -1; i--) {\n    if (encountered[myData[i].internalUID] === true) {\n      newData.push({...myData[i], latest: false})\n    }\n    else {\n      newData.push({...myData[i], latest: true})\n    }\n    encountered[myData[i].internalUID] = true\n  }\n  return (<ListFactory data={newData} generator={(x, index) => notificationItemGenerator(x, x.internalUID, \"\"+x.internalUID+index, setSelTab)} style={TransportViewStyle}/>)\n}\n\nconst detailPersistentStore = {}\n\nconst DetailGenerator = ({details}) => {\n  const [id, index] = details\n  if (detailPersistentStore[id] === undefined) {\n    detailPersistentStore[id] = readDataStore(index)\n  }\n  const [data, setData] = React.useState(detailPersistentStore[id])\n  return (\n  <div>\n  <ListFactory header={(<Material.TableHead><Material.TableRow>{formFields.map((x, index) => (<Material.TableCell key={index}>{x.friendlyName}</Material.TableCell>))}</Material.TableRow></Material.TableHead>)} data={[data]} generator={x => detailItemGenerator(x, x.internalUID)} style={TransportViewStyle}/>\n  <Material.Select variant=\"outlined\" native value={data.status} onChange={(event) => {\n    detailPersistentStore[id] = {...detailPersistentStore[id], status: event.target.value}\n    setData(detailPersistentStore[id])\n  }}>\n  {statuses.map((val, index) => (<option key={index} value={val}>{val}</option>))}\n  </Material.Select>\n  <Material.Button variant=\"outlined\" onClick={() => {editData(index, detailPersistentStore[id])}}>Save</Material.Button>\n  </div>\n  )\n}\n\nconst editData = async (index, newData) => {\n  const refresh = await writeDataStore(index, newData)\n  if (refresh) {\n    notifyNewData()\n  }\n}\n\nconst readDataStore = (internalUID) => {\n  const result = dataStore.filter(x => x.internalUID === internalUID)\n  if (result.length === 0) {\n    return undefined\n  }\n  else {\n    return result[0]\n  }\n}\n\nvar ackWriteToken = 0\nvar currWriteToken = 0\nvar pendingWrites = []\n\n\nconst writeDataStore = async (internalUID, write) => {\n  currWriteToken++\n  var resolve\n  const myPromise = new Promise(v => resolve=v)\n  pendingWrites[currWriteToken] = resolve\n  socket.emit(\"writeDataStore\", [internalUID, write, currWriteToken])\n  await myPromise\n  if (currWriteToken === ackWriteToken) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst appendDataStore = async (write) => {\n  currWriteToken++\n  var resolve\n  const myPromise = new Promise(v => resolve=v)\n  pendingWrites[currWriteToken] = resolve\n  socket.emit(\"appendDataStore\", [write, currWriteToken])\n  await myPromise\n  if (currWriteToken === ackWriteToken) {\n    return true\n  }\n  else {\n    return false\n  }\n}\n\nconst readRange = () => {\n  return dataStore\n}\n\nconst submitForm = async (data) => {\n  const refresh = await appendDataStore(data)\n  if (refresh) {\n    notifyNewData()\n  }\n}\n\nconst FormFactory = ({fields, defaults}) => {\n  var fieldStates = []\n  const [states, setStates] = React.useState(fields.map(x => x.initialData))\n  var myStates = states\n  for (var index = 0; index < fields.length; index++) {\n    const i = index\n    const field = fields[i]\n    fieldStates.push([states[i], x => {\n      myStates = [...myStates]\n      myStates[i] = x\n      setStates(myStates)\n    },field.initialData, field.name, field.friendlyName])\n  }\n  const initializeFields = () => {\n    setStates(fields.map(x => x.initialData))\n  }\n  const submit = () => {\n    var constitutedObject = {}\n    for (const {name, initialData} of defaults) {\n      constitutedObject[name] = initialData\n    }\n    for (const [text, setText, initialData, fieldName] of fieldStates) {\n      constitutedObject[fieldName] = text\n    }\n    submitForm(constitutedObject)\n    initializeFields()\n  }\n  return (\n  <form noValidate>\n  <div>\n  {fieldStates.map(([text, setText, initialData, fieldName, friendlyName], index) => {\n    return (\n      <div style={formItemStyle} key={index}>\n      <Material.TextField multiline label={friendlyName} variant=\"outlined\" value={text} onChange={(event) => setText(event.target.value)}/>\n      </div>\n    )\n  })}\n  </div>\n  <Material.Button variant=\"outlined\" onClick={submit}>submit</Material.Button>\n  </form>\n  )\n}\n\nconst formItemStyle = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  padding: \"5px\"\n}\n\nconst NewIndentView = () => {\n  return (<div style={TransportViewStyle}><FormFactory fields={formFields} defaults={dataDefaults}/></div>)\n}\n\nconst TransportView = ({setSelTab}) => {\n  const [data, setData] = React.useState(readRange())\n  React.useEffect(() => {\n    const callbackID = registerCallback(setData)\n    return () => deregisterCallback(callbackID)\n  }, [])\n  return (<ListFactory header={(<Material.TableHead><Material.TableRow>{displayFields.map((x, index) => (<Material.TableCell key={index}>{x.friendlyName}</Material.TableCell>))}</Material.TableRow></Material.TableHead>)} data={data} generator={x => transportItemGenerator(x, x.internalUID, setSelTab)} style={TransportViewStyle}/>)\n}\n\nconst TransportViewStyle = {\n  font: \"20px Arial, sans-serif\"\n}\n\nconst transportItemGenerator = (data, index, setSelTab) => {\n  return (\n    <Material.TableRow key={data.internalUID} onClick={() => {\n      addDetailTab(data, index)\n      setSelTab(Infinity)\n    }}>\n      <Material.TableCell>{data.name}</Material.TableCell>\n      <Material.TableCell>{data.startDateTime}</Material.TableCell>\n      <Material.TableCell>{data.endDateTime}</Material.TableCell>\n      <Material.TableCell>{data.origin}</Material.TableCell>\n      <Material.TableCell>{data.destination}</Material.TableCell>\n      <Material.TableCell>{data.POC}</Material.TableCell>\n      <Material.TableCell>{data.POCPhone}</Material.TableCell>\n      <Material.TableCell>{data.status}</Material.TableCell>\n    </Material.TableRow>\n  )\n}\n\nconst detailItemGenerator = (data, index) => {\n  return (\n    <Material.TableRow key={data.internalUID}>\n      <Material.TableCell>{data.name}</Material.TableCell>\n      <Material.TableCell>{data.startDateTime}</Material.TableCell>\n      <Material.TableCell>{data.endDateTime}</Material.TableCell>\n      <Material.TableCell>{data.origin}</Material.TableCell>\n      <Material.TableCell>{data.destination}</Material.TableCell>\n      <Material.TableCell>{data.POC}</Material.TableCell>\n      <Material.TableCell>{data.POCPhone}</Material.TableCell>\n    </Material.TableRow>\n  )\n}\n\nconst notificationItemGenerator = (data, index, key, setSelTab) => {\n  return (\n    <Material.TableRow key={key} onClick={() => {\n      addDetailTab(data, index)\n      setSelTab(Infinity)\n    }}><Material.TableCell style={notificationItemStyle(data.latest)} align=\"center\">{data.title}</Material.TableCell></Material.TableRow>\n  )\n}\n\nconst notificationItemStyle = (latest) => {\n  if (latest === false) {\n    return {\n      color: \"grey\"\n    }\n  }\n  else {\n    return {}\n  }\n}\n\nconst addDetailTab = (data, index) => {\n  addTab([tabID, index])\n  tabID++\n}\n\nconst ListFactory = ({data, generator, style, header, tail}) => {\n  return (\n    <Material.TableContainer>\n      <Material.Table>\n        {header}\n        <Material.TableBody>\n          {data.map(generator)}\n        </Material.TableBody>\n        {tail}\n      </Material.Table>\n    </Material.TableContainer>\n  )\n}\n\nconst getCallbackSystem = (dataSource) => {\n\n  const registeredCallbacks = []\n\n  const registerCallback = (callback) => {\n    return registeredCallbacks.push(callback)-1\n  }\n\n  const deregisterCallback = (id) => {\n    if (id > -1 && id < registeredCallbacks.length) {\n      registeredCallbacks[id] = ()=>{}\n    }\n  }\n  \n  const notifyNewData = () => {\n    for (const callback of registeredCallbacks) {\n      callback(dataSource())\n    }\n  }\n\n  return [registerCallback, deregisterCallback, notifyNewData]\n}\n\nvar dataStore = []\n\nconst readNotifications = () => {\n  return notificationsStore\n}\n\nvar notificationsStore = []\n\nconst statuses = [\"Pending\", \"Submitted\", \"Recommended\"]\n\nconst formFields = [{name: \"name\", initialData: \"\", friendlyName: \"Purpose\"}, {name: \"startDateTime\", initialData: \"\", friendlyName: \"Start time\"}, {name: \"endDateTime\", initialData: \"\", friendlyName: \"End time\"}, {name: \"origin\", initialData: \"\", friendlyName: \"Reporting location\"}, {name: \"destination\", initialData: \"\", friendlyName: \"Destination\"}, {name: \"POC\", initialData: \"\", friendlyName: \"Contact person\"}, {name: \"POCPhone\", initialData: \"\", friendlyName: \"Contact person number\"}]\n\nconst dataDefaults = [{name: \"status\", initialData: \"Pending\", friendlyName: \"Status\"}]\n\nconst displayFields = [...formFields, ...dataDefaults]\n\nconst Tabs = ({children, selTab, setSelTab}) => {\n  return (\n    <div>\n      <Material.AppBar position=\"static\">\n        <Material.Tabs variant=\"scrollable\" value={Math.min(selTab, children.length-1)}>\n          {children.map((child, index) => {\n            const obj = {...child.props, removeCallback: () => child.props.removeCallback(index, children.length), onClick: () => {setSelTab(index)}, active: index === Math.min(selTab, children.length-1), key: child.props.mykey}\n            return (<Tab {...obj}></Tab>)\n          })}\n        </Material.Tabs>\n      </Material.AppBar>\n      <div>\n        {children[Math.min(selTab, children.length-1)]}\n      </div>\n    </div>\n  )\n}\n\nconst Tab = ({label, onClick, active, removable, removeCallback}) => {\n  return (\n    <Material.Tab style={{padding: 0}} disableRipple selected label={(<span><Material.Tab label={label} onClick={onClick} selected={active ? true : null}/>\n      {removable ? (<Material.IconButton size=\"small\" onClick={removeCallback}><Icons.Close style={{fill: \"red\"}}/></Material.IconButton>) : undefined}\n      </span>)}/>\n  )\n}\n\nconst TabCloseStyle = {\n  font: \"16px Arial, sans-serif\",\n  margin: \"auto\"\n}\n\nconst [registerCallback, deregisterCallback, notifyNewData] = getCallbackSystem(readRange)\n\nconst [registerNotify, deregisterNotify, notifyNewN] = getCallbackSystem(readNotifications)\n\nReactDOM.render(\n  <div style={{textAlign: \"center\"}}>\n    <App/>\n  </div>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}